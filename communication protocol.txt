Commands:
ok[sMoveX#Y#Z#S#] Where # is a double, This will move the robot to an XYZ position, in S is speed in centimeters / second from the current location to goal location
                  Send Example:   [sMoveX15Y15Z20S25]\n   //y is positive  xyz are in mm 
                  Return Example: [R1:succeed]\n or [R2:fail]  R1:SUCCEED R2:OUT OF RANGE

ok[gSimuX#Y#Z#]   Where # is a double, This will caculate if the robot can arrive the XYZ position
		  Send Example:   [gSimuX0Y120Z100]\n
		  Return Example: [R1:in range]\n or [R2:fail in dst]\n or [R3: fail in path]\n    R3:FAIL IN THE PATH   R2:FAIL IN THE DESTINATION   R1:SUCCEED

ok[gVer]          Return the version of the firmware
                  Send Example:   [gVer]\n
		  Return Example: [Ver.1.3.4]\n
  
ok[sServoN#V#]    Where S# is the servo number and V# is an angle between 0 and 180. This will set the angle of that particular servo
                  Send Example:   [sServoN1V1]\n 
                  Return Example: [ok]
                  
ok[sPumpV#]       Where # is either 1 or 0. 1 means pump on, 0 means pump off.
                  Send Example:   [sPumpV1]\n
                  Return Example: [ok]

ok[gPump]	  Get back the status of the pump
                  Send Example:   [gPump]\n
                  Return Example: [R1:sucking objs]\n or [R2:sucking nothing]\n or [R3:off]\n   R1:GRAB THE THINGS   R2:PUMP ON   R3:PUMP OFF

ok[sGripperV#]    Where # is either 1 or 0. 1 means gripper on, 0 means gripper off.
                  Send Example:   [sGripperV1]\n
                  Return Example: [ok]

ok[gGripper]	  Get back the status of the gripper
                  Send Example:   [gGripper]\n
                  Return Example: [R1:grabbing objs]\n or [R2:grabbing nothing]\n or [R3:off]\n   R1:GRAB THE THINGS   R2:GRIPPER ON   R3:GRIPPER OFF 
                
ok[sAttachS#]      Attach servo #. Same as servo #'s in uarm_library.h
                  Send Example:   [sAttachS1]\n
                  Return Example: [R1:ok]\n or [R2:wrong servo num]\n
                  
ok[sDetachS#]      Detach servo #. Same as servo #'s in uarm_library.h
                  Send Example:   [sDetachS1]\n
                  Return Example: [R1:ok]\n or [R2:wrong servo num]\n
                  
ok[gCrd]          Returns the XYZ coordinate position of the robot
                  Send Example:   [gcoords]\n
                  Return Example: [coordsX#Y#Z#]
                  
  
ok[gAng]          Returns the analog read angle of all the servos in the robot and returns them as angleA#B#C#D# where ABCD are servos 0,1,2,3 respectively
                  Send Example:   [gAng]\n
                  Return Example: [angA#B#C#D#]
                  
ok[gIKX#Y#Z#]     Returns the inverse kinematics for XYZ point in the form A#B#C# where ABC are servos 0,1,2 respectively
                  Send Example:   [gikX0Y-15Z15#]\n
                  Return Example: [ikA90B15C80] 
                  
ok[gFKA#B#C#]     Returns the forward kinematics for ABC servo angles in the form X#Y#Z# where ABC are servos 0,1,2 respectively
                  Send Example:   [gfkA90B15C80]\n
                  Return Example: [fkX0Y-15Z15] 
                  
ok[gMov]          Returns whether or not the robot is currently moving. Returns either 1 or 0 if it is moving or not.
                  Send Example: [gMov]\n
                  Return Example: [R1]  R1:PROCESSING R2:FREE
  
ok[gTip]          Returns whether or not the tip of the robot is currently pressed. Returns either 1 if the tip is pressed, 0 if not.
                  Send Example: [gTip]\n
                  Return Example: [R1]  R1:OFF R2:ON

ok[sBuzzF#T#]      Set the buzzer to F Frequency for T time
                  Send Example:   [sBuzzF261.63T1]\n
                  Return Example: [R1:OK] or [R2:no negtive]